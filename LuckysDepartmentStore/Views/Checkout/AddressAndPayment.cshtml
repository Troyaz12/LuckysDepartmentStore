@model LuckysDepartmentStore.Models.ViewModels.Checkout.OrderModelVM
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{  

   

}
 <head>
         <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add a product</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-beta1/css/bootstrap.min.css" rel="stylesheet">
    @* <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script> *@
    <script src="https://cdn.jsdelivr.net/npm/popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-beta1/js/bootstrap.min.js"></script>
    <!-- Ensure these scripts are included for client-side validation -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://ajax.aspnetcdn.com/ajax/jquery.validate/1.19.2/jquery.validate.min.js"></script>
    <script src="https://ajax.aspnetcdn.com/ajax/mvc/5.2.3/jquery.validate.unobtrusive.min.js"></script>
 </head>

 <form id="addressForm" asp-action="AddressAndPayment" enctype="multipart/form-data">
    @Html.AntiForgeryToken()
     <h2>Address And Payment</h2>

    <div class="scrollable-section mt-2" id="shippingAddressList">
        @Html.Partial("_ShippingPartial", Model.Shipping)
    </div>
    
    <div class="row mb-5">
        <div class="col-md-12">
            <!-- Button trigger modal -->
            <button type="button" class="btn btn-primary mt-4" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
                Add Shipping Address
            </button>

            <!-- Modal -->
            <div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h1 class="modal-title fs-5" id="staticBackdropLabel">Add Shipping Address</h1>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <label for="FirstName">First Name</label>
                            <input name="FirstName" id="FirstName" class="form-control">
                            <span class="text-danger" id="FirstNameError"></span>

                            <label for="LastName">Last Name</label>
                            <input name="LastName" id="LastName" class="form-control">
                            <span class="text-danger" id="LastNameError"></span>

                            <label for="Address1">Address1</label>
                            <input name="Address1" id="Address1" class="form-control">
                            <span class="text-danger" id="Address1Error"></span>

                            <label for="Address2">Address2</label>
                            <input name="Address2" id="Address2" class="form-control">
                            <span class="text-danger" id="Address2Error"></span>

                            <label for="City">City</label>
                            <input name="City" id="City" class="form-control">
                            <span class="text-danger" id="CityError"></span>

                            <label for="State">State</label>
                            <input name="State" id="State" class="form-control">
                            <span class="text-danger" id="StateError"></span>

                            <label for="ZipCode">ZipCode</label>
                            <input name="ZipCode" id="ZipCode" class="form-control">
                            <span class="text-danger" id="ZipCodeError"></span>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button id="save" type="button" class="btn btn-primary">Save</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
     <hr />
        <div class="scrollable-section mt-2" id="paymentOptionList">
        @await Html.PartialAsync("_PaymentPartial", Model.Payment)
     </div>

    <div class="row">
        <div class="col-md-12">
            <!-- Button trigger modal -->
            <button type="button" class="btn btn-primary mt-4" data-bs-toggle="modal" data-bs-target="#paymentBackdrop">
                Add Payment Method
            </button>

            <!-- Modal -->
            <div class="modal fade" id="paymentBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="paymentBackdropLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h1 class="modal-title fs-5" id="paymentBackdropLabel">Add Payment Method</h1>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <label for="FirstName">First Name</label>
                            <input name="FirstName" id="FirstNamePay" class="form-control">
                            <span class="text-danger" id="FirstNameError"></span>

                            <label for="LastName">Last Name</label>
                            <input name="LastName" id="LastNamePay" class="form-control">
                            <span class="text-danger" id="LastNameError"></span>

                            <label for="AccountNumber">Credit Card Number</label>
                            <input name="AccountNumber" id="AccountNumberPay" class="form-control">
                            <span class="text-danger" id="AccountNumberError"></span>

                            <label for="CvcCode">CvcCode</label>
                            <input name="CvcCode" id="CvcCodePay" class="form-control">
                            <span class="text-danger" id="CvcCodeError"></span>

                            <label for="BillingAddress1">Address 1</label>
                            <input name="BillingAddress1" id="BillingAddress1Pay" class="form-control">
                            <span class="text-danger" id="BillingAddress1Error"></span>

                            <label for="BillingAddress2">Address 2</label>
                            <input name="BillingAddress2" id="BillingAddress2Pay" class="form-control">
                            <span class="text-danger" id="BillingAddress2Error"></span>

                            <label for="City">City</label>
                            <input name="City" id="CityPay" class="form-control">
                            <span class="text-danger" id="CityError"></span>

                            <label for="State">State</label>
                            <input name="State" id="StatePay" class="form-control">
                            <span class="text-danger" id="StateError"></span>

                            <label for="ZipCode">ZipCode</label>
                            <input name="ZipCode" id="ZipCodePay" class="form-control">
                            <span class="text-danger" id="ZipCodeError"></span>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button id="savePayment" type="button" class="btn btn-primary">Save</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="validationMessageShipping" class="error-message">Please select at least one shipping option.</div>
    <div id="validationMessagePayment" class="error-message">Please select at least one payment option.</div>
<input id="submitButton" type="submit" value="Submit Order" class="mt-5"/>

</form>

<script>
    $(document).ready(function () {
   
        $('#save').on('click', function (e) {
            e.preventDefault();

            var FirstName = $('#FirstName').val();
            var LastName = $('#LastName').val();
            var Address1 = $('#Address1').val();
            var Address2 = $('#Address2').val() || null;
            var City = $('#City').val();
            var State = $('#State').val();
            
            var zipCodeValue = $('#ZipCode').val() || 0;
            var ZipCode = zipCodeValue;
            var SelectedShippingAddressID = $('#SelectedShippingAddressID').val();

            var item = {
                FirstName: FirstName,
                LastName: LastName,
                Address1: Address1,
                Address2: Address2,
                City: City,
                State: State,
                ZipCode: ZipCode
            };
       
            $.ajax({
                url: '@Url.Action("CreateShippingAddress", "Consumer")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(item), 

                success: function (data) {
                    

                    try {
                        if (data.success === false) {
                            // Display validation errors (if any)
                            for (var field in data.errors) {
                                var errorMessage = data.errors[field] + '<br/>'
                                $("#" + field).next('.text-danger').html(errorMessage);

                            }
                        } else {
                            // Clear input fields after successful addition
                            $("#FirstName").val('');
                            $("#LastName").val('');
                            $("#Address1").val('');
                            $("#Address2").val('');
                            $('#City').val('');
                            $("#State").val('');
                            $('#ZipCode').val('');
                            $("#shippingAddressList").html(data);
                            // Successfully updated
                            $('#staticBackdrop').modal('hide');
                        }
                    } catch (error) {
                        console.error("Error hiding modal:", error);
                    }

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert("Error updating list: " + errorThrown);
                }
            });
        });

        $('#staticBackdrop').on('hidden.bs.modal', function () {
            // Clear input fields
            $("#FirstName").val('');
            $("#LastName").val('');
            $("#Address1").val('');
            $("#Address2").val('');
            $('#City').val('');
            $("#State").val('');
            $('#ZipCode').val('');

            // Clear error messages
            $('.text-danger').html('');
        });


         $('#savePayment').on('click', function (e) {
          e.preventDefault();

          var FirstName = $('#FirstNamePay').val();
          var LastName = $('#LastNamePay').val();
          var BillingAddress1 = $('#BillingAddress1Pay').val();
          var BillingAddress2 = $('#BillingAddress2Pay').val() || null;
          var City = $('#CityPay').val();
          var State = $('#StatePay').val();

          var zipCodeValue = $('#ZipCodePay').val() || 0;
          var ZipCode = zipCodeValue;

          var accountNumberValue = $('#AccountNumberPay').val() || null;

             console.log("Test" + accountNumberValue);
            var AccountNumber = accountNumberValue;

          var cvcValue = $('#CvcCodePay').val() || 0;
            var CvcCode = cvcValue;

          var item = {
              FirstName: FirstName,
              LastName: LastName,
              BillingAddress1: BillingAddress1,
              BillingAddress2: BillingAddress2,
              City: City,
              State: State,
              ZipCode: ZipCode,
              AccountNumber: AccountNumber,
              CvcCode: CvcCode
          };
          $.ajax({
              url: '@Url.Action("CreatePaymentOption", "Consumer")',
              type: 'POST',
              contentType: 'application/json',
              data: JSON.stringify(item),

              success: function (data) {

                    try {
                        if (data.success === false) {
                            
                            // Display validation errors (if any)
                            for (var field in data.errors) {

                                var errorMessage = data.errors[field] + '<br/>'
                                $("#" + field + "Pay").next('.text-danger').html(errorMessage);
                               
                            }
                        } else {
                            $("#paymentOptionList").html(data);
                            console.log("Test3");

                            $("#FirstNamePay").val('');
                            $("#LastNamePay").val('');
                            $("#BillingAddress1Pay").val('');
                            $("#BillingAddress2Pay").val('');
                            $('#CityPay').val('');
                            $("#StatePay").val('');
                            $('#ZipCodePay').val('');
                            $('#AccountNumberPay').val('');
                            $('#CvcCodePay').val('');

                            $('#paymentBackdrop').modal('hide');
                        }
                    } catch (error) {
                        console.error("Error hiding modal:", error);
                    }
              },
              error: function (jqXHR, textStatus, errorThrown) {
                  alert("Error updating list: " + errorThrown);
              }
          });
      });

        $(document).on('show.bs.modal', '#editShippingBackdrop', function (event) {
            var button = $(event.relatedTarget); // Button that triggered the modal

            // Extract data from data-* attributes
            var firstName = button.data('firstnameedit');
            var lastName = button.data('lastnameedit');
            var address1 = button.data('address1edit');
            var address2 = button.data('address2edit');
            var city = button.data('cityedit');
            var state = button.data('stateedit');
            var zipcode = button.data('zipcodeedit');
            var shippingAddressID = button.data('shippingaddressid');

            // Update the modal's input fields
            var modal = $(this);
            modal.find('#FirstNameEdit').val(firstName);
            modal.find('#LastNameEdit').val(lastName);
            modal.find('#Address1Edit').val(address1);
            modal.find('#Address2Edit').val(address2);
            modal.find('#CityEdit').val(city);
            modal.find('#StateEdit').val(state);
            modal.find('#ZipCodeEdit').val(zipcode);
            modal.find('#SelectedShippingAddressID').val(shippingAddressID);
        });


        $(document).on('click', '#saveBtn', function () {
            var modal = $('#editShippingBackdrop');
            console.log(modal.find('#SelectedShippingAddressID').val());

            var zipCodeValue = modal.find('#ZipCodeEdit').val() || 0;

            var shippingAddress = {
                FirstName: modal.find('#FirstNameEdit').val(),
                LastName: modal.find('#LastNameEdit').val(),
                Address1: modal.find('#Address1Edit').val(),
                Address2: modal.find('#Address2Edit').val(),
                City: modal.find('#CityEdit').val(),
                State: modal.find('#StateEdit').val(),
                ZipCode: zipCodeValue,
                ShippingAddressID: modal.find('#SelectedShippingAddressID').val()
            };

            // Send the updated data to the server using AJAX
            $.ajax({
                url: '@Url.Action("EditShippingAddress", "Consumer")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(shippingAddress),
                success: function (data) {
                    if (data.success === false) {
                        // Display validation errors (if any)
                        for (var field in data.errors) {
                            var errorMessage = data.errors[field] + '<br/>'
                            $("#" + field + "Edit").next('.text-danger').html(errorMessage);
                        }
                    } else {
                        // Successfully updated
                        $("#shippingAddressList").html(data);
                        modal.modal('hide');
                    }
                },
                error: function () {
                    alert('Error occurred while saving the data.');
                }
            });
        });









          $(document).on("click", ".delete-btn", function () {
              var button = $(this);
              var id = button.data("id");

              if (!confirm("Are you sure you want to delete this address?")) {
                  return;
              }

              $.ajax({
                  url: '@Url.Action("Delete", "Consumer")',
                  type: "POST",
                  contentType: "application/json",
                  data: JSON.stringify(id),
                  success: function (response) {
                      if (response.success) {
                          // Select the address container (the div with class "col-md-12 mb-3")
                          var addressRow = button.closest(".mb-2").prev(".col-md-12");

                          if (addressRow.length > 0) {
                              addressRow.fadeOut(300, function () {
                                  $(this).remove();  // Remove the address container from the DOM
                              });
                          } else {
                              console.log("Address row not found.");
                          }
                          // Select and remove the delete button container (the div with class "mb-2")
                          var buttonContainer = button.closest(".mb-2");
                          if (buttonContainer.length > 0) {
                              buttonContainer.fadeOut(300, function () {
                                  $(this).remove();  // Remove the button container from the DOM
                              });
                          } else {
                              console.log("Button container not found.");
                          }

                      } else {
                          alert("Failed to delete address.");
                      }
                  },
                  error: function () {
                      alert("An error occurred while deleting the address.");
                  }
              });
          });

        // payment edit and delete
        $(document).on('show.bs.modal', '#editPaymentBackdrop', function (event) {        
              var button = $(event.relatedTarget); // Button that triggered the modal

              var firstName = button.data('firstnameeditpay');
              var lastName = button.data('lastnameeditpay');
              var address1 = button.data('billingaddress1editpay');
              var address2 = button.data('billingaddress2editpay');
              var city = button.data('cityeditpay');
              var state = button.data('stateeditpay');
              var zipcode = button.data('zipcodeeditpay');

              var accountNumber = button.data('accountnumbereditpay');
              var cvccodeedit = button.data('cvccodeeditpay');

              var paymentOptionsID = button.data('paymentoptionsid');

                // Update the modal's input fields
              var modal = $(this);
              modal.find('#FirstNameEditPay').val(firstName);
              modal.find('#LastNameEditPay').val(lastName);
              modal.find('#BillingAddress1EditPay').val(address1);
              modal.find('#BillingAddress2EditPay').val(address2);
              modal.find('#CityEditPay').val(city);
              modal.find('#StateEditPay').val(state);
              modal.find('#ZipCodeEditPay').val(zipcode);
              modal.find('#AccountNumberEditPay').val(accountNumber);
              modal.find('#CvcCodeEditPay').val(cvccodeedit);
              modal.find('#PaymentOptionsID').val(paymentOptionsID);
          });

        $(document).on('click', '#saveBtnPayment', function () {         
            var modal = $('#editPaymentBackdrop');

            var zipCodeValue = modal.find('#ZipCodeEditPay').val() || 0;
            var CvsCodeValue = modal.find('#CvcCodeEditPay').val() || 0;

            var shippingAddress = {
                FirstName: modal.find('#FirstNameEditPay').val(),
                LastName: modal.find('#LastNameEditPay').val(),
                BillingAddress1: modal.find('#BillingAddress1EditPay').val(),
                BillingAddress2: modal.find('#BillingAddress2EditPay').val(),
                City: modal.find('#CityEditPay').val(),
                State: modal.find('#StateEditPay').val(),
                ZipCode: zipCodeValue,
                AccountNumber: modal.find('#AccountNumberEditPay').val(),
                CvcCode: CvsCodeValue,
                PaymentOptionsID: modal.find('#PaymentOptionsID').val(),
            };

            // Send the updated data to the server using AJAX
            $.ajax({
                url: '@Url.Action("EditPayment", "Consumer")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(shippingAddress),
                success: function (data) {
                  // Handle the success response
                    if (data.success === false) {
                        console.log("test:");
                        // Display validation errors (if any)
                        for (var field in data.errors) {
                            var errorMessage = data.errors[field] + '<br/>'
                            $("#" + field + "EditPay").next('.text-danger').html(errorMessage);
                        }
                    } else {
                        // Successfully updated
                        $("#paymentOptionList").html(data);
                        modal.modal('hide');
                    }    
                },
                error: function () {
                    alert('Error occurred while saving the data.');
                }
            });
          });

        $(document).on("click", ".delete-btn-payment", function () {
            var button = $(this);
            var id = button.data("id");

            if (!confirm("Are you sure you want to delete this address?")) {
                return;
            }

            $.ajax({
                url: '@Url.Action("DeletePayment", "Consumer")',
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(id),
                success: function (response) {
                    if (response.success) {
                        // Select the address container (the div with class "col-md-12 mb-3")
                        var addressRow = button.closest(".mb-2").prev(".col-md-12");

                        if (addressRow.length > 0) {
                            addressRow.fadeOut(300, function () {
                                $(this).remove();  // Remove the address container from the DOM
                            });
                        } else {
                            console.log("Address row not found.");
                        }
                        // Select and remove the delete button container (the div with class "mb-2")
                        var buttonContainer = button.closest(".mb-2");
                        if (buttonContainer.length > 0) {
                            buttonContainer.fadeOut(300, function () {
                                $(this).remove();  // Remove the button container from the DOM
                            });
                        } else {
                            console.log("Button container not found.");
                        }

                    } else {
                        alert("Failed to delete address.");
                    }
                },
                error: function () {
                    alert("An error occurred while deleting the address.");
                }
            });
        });

        document.getElementById('submitButton').addEventListener('click', function (event) {

            const validationMessagePayment = document.getElementById('validationMessagePayment');
            const validationMessageShipping = document.getElementById('validationMessageShipping');

            //payment validation check
            const radioButtonsPayment = document.querySelectorAll('#form-payment-container .form-check-input');
            let isPaymentChecked = false;

            radioButtonsPayment.forEach(radio => {
                if (radio.checked) {
                    isPaymentChecked = true;
                }
            });

            if (!isPaymentChecked) {
                validationMessagePayment.style.display = 'block';
                event.preventDefault(); // stop submission validation fails
            } else {
                validationMessagePayment.style.display = 'none';                
            }

            // shipping validation check
            const radioButtonsShipping = document.querySelectorAll('#form-shipping-container .form-check-input');
            let isShippingChecked = false;

            radioButtonsShipping.forEach(radio => {
                if (radio.checked) {
                    isShippingChecked = true;
                }
            });

            if (!isShippingChecked) {
                validationMessageShipping.style.display = 'block';
                event.preventDefault(); // stop submission validation fails
            } else {
                validationMessageShipping.style.display = 'none';
            }


        });


    });
</script>
